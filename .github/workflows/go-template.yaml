name: Go Template Workflow

on:
  workflow_call:
    inputs:
      go_version:
        required: true
        type: string
      go_lint_ver:
        required: false
        type: string
      go_test_flags:
        required: false
        type: string
      dockerfile_path:
        required: false
        type: string
        default: ./Dockerfile
      docker_context:
        required: false
        type: string
        default: .
      docker_image_name:
        required: false
        type: string
        default: my-go-app
      helm_release_name:
        required: false
        type: string
      helm_namespace:
        required: false
        type: string
      gitops_repo:
        required: false
        type: string
        default: your-org/gitops-infra
      kube_cluster_dev:
        required: false
        type: string
      kube_cluster_stage:
        required: false
        type: string
      kube_cluster_prod:
        required: false
        type: string
      docker_registry:
        required: false
        type: string
        default: docker.io
    secrets:
      CI_SECRET:
        required: false
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      GITOPS_REPO_TOKEN:
        required: false
    outputs:
      coverage:
        value: ${{ jobs.test.outputs.coverage }}

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.test.outputs.coverage }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
            sh -s -- -b $(go env GOPATH)/bin ${{ inputs.go_lint_ver || 'v1.57.2' }}

      - name: Run golangci-lint
        run: |
          $(go env GOPATH)/bin/golangci-lint run ./...

      - name: Run tests
        id: test
        run: |
          go test ./cmd ${{ inputs.go_test_flags }} -coverprofile=coverage.out
          echo "coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')" >> $GITHUB_OUTPUT

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Git branch name
        id: vars
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "tag=${BRANCH}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Registry
        if: ${{ secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker_registry }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.docker_context }}
          file: ${{ inputs.dockerfile_path }}
          tags: |
            ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}:${{ steps.vars.outputs.tag }}
          push: true


  flux-deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: ${{ inputs.helm_release_name != '' }}
    steps:
      - name: Determine environment
        id: env
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" =~ -dev$ ]]; then echo "env=dev" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" =~ -stage$ ]]; then echo "env=stage" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" =~ -prod$ ]]; then echo "env=prod" >> $GITHUB_OUTPUT
          else echo "Unknown environment"; exit 1
          fi
      - name: Extract Git branch name
        id: vars
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "tag=${BRANCH}" >> $GITHUB_OUTPUT

      - name: Checkout GitOps repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.gitops_repo }}
          token: ${{ secrets.GITOPS_REPO_TOKEN }}
          ref: main

      - name: Update HelmRelease image tag
        run: |
          ENVIRONMENT=${{ steps.env.outputs.env }}
          RELEASE_NAME="${{ inputs.helm_release_name }}"
          IMAGE="${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}"
          IMAGE_TAG="${{ steps.vars.outputs.tag }}"
          CLUSTER_VAR="kube_cluster_${ENVIRONMENT}"
          CLUSTER_NAME="${{ inputs[CLUSTER_VAR] }}"
          FILE="./clusters/$ENVIRONMENT/${RELEASE_NAME}.yaml"

          echo "Updating HelmRelease for $ENVIRONMENT cluster: $CLUSTER_NAME"
          yq e -i ".spec.values.image.repository = \"$IMAGE\"" "$FILE"
          yq e -i ".spec.values.image.tag = \"$IMAGE_TAG\"" "$FILE"

      - name: Commit and push GitOps changes
        run: |
          git config user.name "github-actions"
          git config user.email "ci@github"
          git add clusters/
          git commit -m "Update HelmRelease for ${{ inputs.helm_release_name }}"
          git push
