name: Go Template Workflow

on:
  workflow_call:
    inputs:
      go_version:
        required: true
        type: string
      go_lint_ver:
        required: false
        type: string
      go_test_flags:
        required: false
        type: string
      dockerfile_path:
        required: false
        type: string
        default: ./Dockerfile
      docker_context:
        required: false
        type: string
        default: .
      docker_image_name:
        required: false
        type: string
        default: my-go-app
    secrets:
      CI_SECRET:
        required: false
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
    outputs:
      coverage:
        value: ${{ jobs.test.outputs.coverage }}

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.test.outputs.coverage }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
            sh -s -- -b $(go env GOPATH)/bin ${{ inputs.go_lint_ver || 'v1.57.2' }}

      - name: Run golangci-lint
        run: |
          $(go env GOPATH)/bin/golangci-lint run ./...

      - name: Run tests
        id: test
        run: |
          go test ./cmd ${{ inputs.go_test_flags }} -coverprofile=coverage.out
          echo "coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')" >> $GITHUB_OUTPUT

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.docker_context }}
          file: ${{ inputs.dockerfile_path }}
          tags: ${{ inputs.docker_image_name }}:latest
          push: false

  flux-deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: ${{ inputs.helm_release_name != '' }}
    steps:
      - name: Checkout GitOps repo
        uses: actions/checkout@v4
        with:
          repository: your-org/gitops-infra
          token: ${{ secrets.GITOPS_REPO_TOKEN }}
          ref: main

      - name: Update HelmRelease image tag
        run: |
          RELEASE_NAME="${{ inputs.helm_release_name }}"
          NAMESPACE="${{ inputs.helm_namespace }}"
          IMAGE="${{ inputs.docker_image_name }}"
          IMAGE_TAG="latest"

          # Предположим, что у вас структура: ./clusters/dev/<release>.yaml
          for ENV in dev stage prod; do
            CLUSTER_VAR="kube_cluster_${ENV}"
            CLUSTER_NAME="${{ inputs[kube_cluster_${ENV}] }}"
            if [[ -n "$CLUSTER_NAME" ]]; then
              echo "Updating $RELEASE_NAME for $ENV cluster..."
              FILE="./clusters/$ENV/${RELEASE_NAME}.yaml"
              yq e -i ".spec.values.image.repository = \"$IMAGE\"" "$FILE"
              yq e -i ".spec.values.image.tag = \"$IMAGE_TAG\"" "$FILE"
            fi
          done

      - name: Commit and push GitOps changes
        run: |
          git config user.name "github-actions"
          git config user.email "ci@github"
          git add clusters/
          git commit -m "Update HelmRelease for ${{ inputs.helm_release_name }}"
          git push